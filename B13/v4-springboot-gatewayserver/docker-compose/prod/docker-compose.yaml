services:
  rabbitmq:
    image: rabbitmq:4.0-management
    hostname: rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics ping" ]
      interval: 10s
      timeout: 20s
      retries: 10
      start_period: 5s
    extends:
      file: otp-docker-compose.yaml
      service: network-deploy-service
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.0
    container_name: keycloak
    ports:
      - "8075:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: otp-docker-compose.yaml
      service: network-deploy-service
  redis:
    image: redis
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 20s
      retries: 10
    extends:
      file: otp-docker-compose.yaml
      service: network-deploy-service
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      ms:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      service: network-deploy-service
      file: otp-docker-compose.yaml

  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ../observability/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    extends:
      service: network-deploy-service
      file: otp-docker-compose.yaml

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yaml:/etc/tempo-config.yml
    extends:
      file: otp-docker-compose.yaml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      service: network-deploy-service
      file: otp-docker-compose.yaml

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      service: network-deploy-service
      file: otp-docker-compose.yaml

  backend:
    image: grafana/loki:latest
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      service: network-deploy-service
      file: otp-docker-compose.yaml


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      service: network-deploy-service
      file: otp-docker-compose.yaml

  config-server:
    image: hogiathang/configserver:v7
    container_name: config-server
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8071/actuator/health | grep UP || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 40
    extends:
      file: otp-docker-compose.yaml
      service: microservice-base-config
    environment:
      - OTEL_SERVICE_NAME=configserver

  eureka-server:
    image: hogiathang/eurekaserver:v7
    container_name: eureka-server
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8070/actuator/health | grep UP || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 40
      start_period: 40s
    depends_on:
      config-server:
        condition: service_healthy
    extends:
      file: otp-docker-compose.yaml
      service: microservice-base-config
    environment:
      - SPRING_APPLICATION_NAME=eurekaserver
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071
      - OTEL_SERVICE_NAME=eurekaserver

  accounts-service:
    image: hogiathang/accounts:v7
    container_name: account-ms
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8080/actuator/health | grep UP || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 40
      start_period: 60s
    extends:
      file: otp-docker-compose.yaml
      service: microservice-service-config
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - INFO_APP_VerSION=7.0
      - OTEL_SERVICE_NAME=account-ms
      - SPRING_RABBITMQ_HOST=rabbitmq

  loans-service:
    image: hogiathang/loans:v7
    container_name: loans-ms
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8090/actuator/health | grep UP || exit 1"]
      interval: 40s
      timeout: 5s
      retries: 40
      start_period: 60s
    extends:
      file: otp-docker-compose.yaml
      service: microservice-service-config
    environment:
      - INFO_APP_VerSION=7.0
      - OTEL_SERVICE_NAME=loans-ms

  cards-service:
    image: hogiathang/cards:v7
    container_name: cards-ms
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:9000/actuator/health | grep UP || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 40
      start_period: 60s
    extends:
      file: otp-docker-compose.yaml
      service: microservice-service-config
    environment:
      - INFO_APP_VerSION=7.0
      - OTEL_SERVICE_NAME=cards-ms

  message:
    image: hogiathang/message:v7
    container_name: message-ms
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:8073/actuator/health | grep UP || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 40
      start_period: 60s
    extends:
      file: otp-docker-compose.yaml
      service: microservice-service-config
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      OTEL_SERVICE_NAME: message-ms

  gateway-server:
    image: hogiathang/gatewayserver:v7
    container_name: gateway-server
    ports:
      - "8072:8072"
    depends_on:
      accounts-service:
        condition: service_healthy
      loans-service:
        condition: service_healthy
      cards-service:
        condition: service_healthy
    extends:
      file: otp-docker-compose.yaml
      service: microgateway-config
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
      SPRING_DATA_REDIS_HOST: redis


networks:
  ms:
    driver: bridge